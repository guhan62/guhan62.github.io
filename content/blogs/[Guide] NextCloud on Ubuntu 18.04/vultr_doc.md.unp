---
draft: unpublished
---

## Introduction
Nextcloud, is a fork of OwnCloud - being a suite of client-server software for creating and using file hosting services. Similar to 
Google Drive or DropBox where one can store Documents, photos and can share it with family and friends.  Nextcloud is free and open-source which allows the client to be in control of their data and files, and getting rid of third-party sites that offer the similar services. [Nextcloud Wiki](https://en.wikipedia.org/wiki/Nextcloud).
Nextcloud is a very vibrant community, and the application being modular the administrator can install tons of plugins from the [Nextcloud App Store](https://apps.nextcloud.com/) that can help the nextcloud clients harness the power of self-hosted cloud services rather than third party services.

## Simpler Steps to reach NextCloud
There are provisions from Vultr cloud vendor to install Nextcloud instance instaneously using their One-Click Application feature. This feature would be recommended for businesses or individuals who only seek usage of Nextcloud and not a VPC (Virtual Private Cloud) instance.  

* [Vultr - Nextcloud](https://www.vultr.com/apps/nextcloud)

* [Vultr One-Click Nextcloud Doc](https://www.vultr.com/docs/one-click-nextcloud)  

*Continue this guide, if you want to setup Nextcloud on your VPC.*

## Prerequisites:
This guide requires two essential steps, in a VPC. Guide being targeted for Ubuntu 18.04 users, it recommends setting up your VPC with basic admin uilities like SSH, Root/Users and Firewall.  

* **VPC Basic Setup** - Initial Secure configuration is vital for any VPC. [Refer Vultr Doc](https://www.vultr.com/docs/initial-secure-server-configuration-of-ubuntu-18-04)  

*  **LAMP Stack Setup** - **L**inux-**A**pache-**M**ariaDB|ySQL-**P**hp, Nextcloud is a php application so the easiest stack to mount our application on would be the LAMP stack.   
*(This guide will also comprise of setting up your LAMP stack)*   

*  **(Optional) DNS Record** - Any instance of hosted web-application that is publicly accessible with data flowing from client/server requires secured transport. For this we need to enable SSL encryption on our Server for the Nextcloud application. Nextloud offers [self-signed SSL certificates](https://docs.nextcloud.com/server/12/admin_manual/installation/source_installation.html#enabling-ssl-label) they are not good being on a public domain as they are comparitively weak. So it is better to go for commercial vendors (from Domain vendors) or using [Let's Encrypt](https://letsencrypt.org/), which offers a free trusted SSL certificate for your server.

## Step 1 - Building the LAMP stack
**Ensure basic [VPC setup](https://www.vultr.com/docs/initial-secure-server-configuration-of-ubuntu-18-04) is completed**
Host being a Ubuntu 18.04 (Linux platform), **L** is knocked from LAMP.

### A for Apache
Apache is the most simple, popular web-servers in the world. Being part of the Apache Software foundation for a long time it has huge community of developers and support and well-documented. It is very suitable for Php applications being the goto choice for our Nextcloud instance.   

    sudo apt-get update
    sudo apt-get install apache2
		
After installing apache web-server now we have to allow default web ports 80, 443 through our Firewall.  

    vultr@vpc:~$ sudo ufw app list
    Available applications:
		        Apache
            Apache Full
            Apache Secure
            OpenSSH
The above applications indicate they require firewall permissions. Now `Apache Full` is the recommended profile as it enables both HTTPS/HTTP traffic over pors `80` and `443`.  
Let's allow the 'Apache Full' cpnfiguration.  
`sudo ufw allow 'Apache Full'`  
You can check the status of your firewall with,  
`sudo ufw status`  

### M for Maria / MySQL
[MySQL](https://en.wikipedia.org/wiki/MySQL) is an open-source RDBMS, it had both free and open source license (GNU-GPL) and various proprietary ones. [MariaDB](https://en.wikipedia.org/wiki/MariaDB) is a fork of MySQL, developed after the [acquistion of MySQL by Oracle](http://www.businesswire.com/news/home/20090420005760/en/Oracle-Buy-Sun). The core features are similar. MySQL provides Nextcloud with metadata storage, Users, privileges, file versions, etc.  
**Instaling and MySQL setup**  

*  First install mysql-server from apt then Run mysql_secure_installation` script for easy installation and basic secure setup of MySQL.  

		sudo apt install mysql-server
		sudo mysql_secure_installation
   	
* Follow the setup instructions, in the script it will ask regarding Passwords, basic stuff and permissions to remove test databases.

* Now setting up the nextcloud database with correct privileges.

		sudo mysql -u root -p
		
		CREATE DATABASE nextcloud;
		CREATE USER 'nextcloud'@'localhost' IDENTIFIED BY 'PASSWORD';
		GRANT ALL PRIVILEGES ON nextcloud.* TO 'nextcloud'@'localhost';

		FLUSH PRIVILEGES;
		exit

### P for PHP
php is a very popular scripting language suited for web-development. Many popular applications like Wordpress, Drupal, Facebook use Php as their back-end. Nextcloud is a php application. Installing `php 7.2`  latest and necessary php packages for Nextcloud is vital for functioning. 

* Installing php and additional pachages  

		sudo apt-get install libapache2-mod-php7.2
		sudo apt-get install php7.2-gd php7.2-json php7.2-mysql php7.2-curl php7.2-mbstring
		sudo apt-get install php7.2-intl php-imagick php7.2-xml php7.2-zip
	
* The base packages for nextcloud core are provided by `libapache2-mod-php7.2`, having the following packages,

		bcmath bz2 calendar Core ctype date dba dom ereg exif fileinfo filter ftp gettext
		hash iconv libxml mhash openssl pcre Phar posix Reflection session shmop SimpleXML
		soap sockets SPL standard sysvmsg sysvsem sysvshm tokenizer wddx xmlreader xmlwriter zlib .
	[Refer Prerequisites](https://docs.nextcloud.com/server/15/admin_manual/installation/source_installation.html#prerequisites-label)
		
## Step 2 - Welcoming NextCloud to LAMP
NextCloud being open-sourced one can download the source code from the Nextcloud site and install in any Linux/Windows distribution.  

* Download nextcloud 19.0 and set the folder with right permissions and privileges and move it to a virtual host directory.
		
		## Download NextCloud
		wget https://download.nextcloud.com/server/releases/nextcloud-19.0.0.zip -O ~/Downloads
		unzip nextcloud-19.0.0.zip
		## Creating a new virtual host
		cd /var/www
		sudo mkdir nextcloud
		sudo mv ~/Downloads/nextcloud-19.0.0/* /var/www/nextcloud/
		sudo chown -R $USER:$USER /var/www/nextcloud
		sudo chmod -R 755 /var/www
		
* Now writing the Apache configuration for our nextcloud instance, here the guide recommends getting a domain name for cheap on namecheap.com, name.com or godaddy.com rather than self-signed SSL certificates, thought self-signed are easy they are good in a LAN or a local setting not suitable over a Cloud setting, as Apache ships with a default SSL certificate If you are willing to go ahead with a domain name it would be easier for **Let's Encrypt** to issue certificates that are reliable and free.

### Default SSL

* This path is the default SSL, write-up a configuration for NextCloud on Apache Sites   

		sudo nano /etc/apache2/sites-available/nextcloud.conf  
		
* Copy paste the following configuration  

		Alias /nextcloud "/var/www/nextcloud/"
		<Directory /var/www/nextcloud/>
				Options +FollowSymlinks
				AllowOverride All
				<IfModule mod_dav.c>
						Dav off
				</IfModule>
     
				SetEnv HOME /var/www/nextcloud
				SetEnv HTTP_HOME /var/www/nextcloud
		</Directory>

* Enable the site configuration for Nextcloud and rewrite the Apache binaries, and also enable the SSL module for Apache and enable the default-ssl config to allow https traffic via defaul SSL certificate
 
		sudo a2ensite nextcloud
		sudo a2enmod rewrite headers env dir mime
		sudo a2enmod ssl
		sudo a2ensite default-ssl
		sudo systemctl restart apache2
		
### Let's Encrypt provided SSL certificates
* Assuiming `my_domain` is assigned with an A record with correct key/value pairs of the public IP from your Vultr Dashboard is setup with your domain vendor.
* If setting up with a prcured domain `my_domain`, then open up the configuration file and paste the following,

		sudo nano /etc/apache2/sites-available/nextcloud.conf  
		
		
		<VirtualHost *:80>
		DocumentRoot /var/www/nextcloud
		ServerName my_domain
		Redirect permanent / https://my_domain/
		<Directory /var/www/nextcloud>
				Options +FollowSymlinks
				AllowOverride All
				<IfModule mod_dav.c>
						Dav off
				</IfModule>
		</Directory>
		ErrorLog ${APACHE_LOG_DIR}/error.log
		CustomLog ${APACHE_LOG_DIR}/access.log combined
		</VirtualHost>

* Restart Apache after enabling the site-configration and rewriting Apache Binaries,

		sudo a2ensite nextcloud
		sudo a2enmod rewrite headers env dir mime
		sudo systemctl restart apache2	
		
## Step 3 - Securing our NextCloud instance
* Certbot is a software by Let’s Encrypt which automates major of the work for creating a SSL certificate for your website. Let’s Encrypt Certificates are valid only for 90 days. But, the certbot runs a cron job to renew the certificate if bound for expiration.  
* Installing Certbot with apt and additional dependencies.

		# Installing the certbot package with inclusing the Repo PPA
		sudo apt-get install software-properties-common
		sudo add-apt-repository universe
		sudo add-apt-repository ppa:certbot/certbot
		sudo apt-get update

		sudo apt-get install certbot python3-certbot-apache
		
* Running the certbot command on `my_domain` with apache option, generates configuration for Apache for a default SSL config.

		sudo certbot --apache -d my_domain -d www.my_domain
		
* The setup process if run for the first time asks for additional details, complete it and then the total setup is done!
[Refer certbot docs](https://certbot.eff.org/lets-encrypt/ubuntubionic-apache)

* Now add the `my_domain` to trusted domain in the nextcloud configration found under `/var/www/nextcloud/config.php`

		'trusted_domains' =>
		array (
				0 => 'localhost',
				1 => 'my_domain',
				2 => 'public_ip'  # Replace with your public IP if required
		),
		
* Open `https://my_domain` on your browser where you will be greeted with installation screen and do the final configuration setup for the Database or also can be done manually over the config.php. 

### Reference:
1. [NextCloud Installation Manual](https://docs.nextcloud.com/server/16/admin_manual/installation/source_installation.html#example-installation-on-ubuntu-18-04-lts-server)
2. [Apache httpd docs](https://httpd.apache.org/docs/2.4/mod)

